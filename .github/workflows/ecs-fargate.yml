name: ECS Fargate docs test

on:
  workflow_dispatch:
  # push:
  #   paths:
  #     - 'usecase-7/**'
  #     - '.github/workflows/usecase-7.yml'
  #   branches: main

# on:
#   pull_request:
#     paths:
#       - 'usecase-8/**'
#       - '.github/workflows/usecase-8.yml'
#     types: [opened, synchronize]

permissions:
  id-token: write
  contents: write

jobs:
  ECS-fargate:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: usecase-8

    steps:
      - name: Code checkout
        uses: actions/checkout@v4.2.2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: SetUp AWS OIDC
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE }}

      - name: Set up TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: latest

      - name: Initialize TFLint
        run: tflint --init

      - name: Run TFLint
        run: tflint -f compact
        continue-on-error: true

      - name: Setup Python for Checkov
        uses: actions/setup-python@v5.6.0

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov Scan
        run: checkov -d . --framework terraform --soft-fail --output json > checkov_output.json

      - name: Upload build artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: checkov-info
          path: checkov_output.json

      - name: Install Conftest (OPA)
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.45.0/conftest_0.45.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.45.0_Linux_x86_64.tar.gz
          #sudo mv conftest /usr/local/bin
          #rm -f conftest_0.45.0_Linux_x86_64.tar.gz

      - name: Run OPA Policy Check with Conftest
        run: |
          terraform plan -out tfplan.binary
          terraform show -json tfplan.binary > tfplan.json
          conftest test tfplan.json -p policy
        continue-on-error: true




      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      # - name: Generate Terraform Docs and Commit
      #   run: |
      #     git config --local user.email ${{ secrets.EMAIL }}
      #     git config --local user.name ${{ secrets.USER_NAME }}
      #     terraform-docs markdown table . > README.md.new
      #     mv README.md.new README.md

      #     if [ -f README.md ]; then
      #       git add README.md
      #       if git commit -m "docs: Update README.md"; then
      #         git push
      #         echo "Successfully committed and pushed README.md changes."
      #       else
      #         echo "No README.md changes to commit."
      #       fi
      #     else
      #       echo "README.md was not generated."
      #     fi

      # - name: Update Pull Request
      #   uses: actions/github-script@v7
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GIT_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization \`${{ steps.init.outcome }}\`
      #       #### Terraform Validation \`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan \`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      
      # - name: Read README.md content
      #   id: readme_content # Assign an ID to reference this step's outputs
      #   run: |
      #     # Use 'cat' to read the file and store it in an environment variable, then echo it to GITHUB_OUTPUT
      #     # We're careful here to handle multiline content by escaping newlines
      #     # and using a delimiter for the output variable.
      #     README=$(cat README.md)
      #     echo "readme<<EOF" >> $GITHUB_OUTPUT
      #     echo "$README" >> $GITHUB_OUTPUT
      #     echo "EOF" >> $GITHUB_OUTPUT

      # - name: Post README.md content to Pull Request
      #   uses: actions/github-script@v7 # Action to run JavaScript in your workflow
      #   if: github.event_name == 'pull_request' # Ensure this only runs for PR events
      #   env:
      #     # Get the README content from the output of the previous step
      #     README_BODY: "${{ steps.readme_content.outputs.readme }}"
      #   with:
      #     github-token: ${{ secrets.GIT_TOKEN }} # GitHub token for authentication
      #     script: |
      #       const output = `#### Current README.md Content
            
      #       <details><summary>Show README.md</summary>
            
      #       \`\`\`markdown
      #       ${process.env.README_BODY}
      #       \`\`\`
            
      #       </details>
            
      #       *Posted by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v4.6.2
      #   with:
      #     name: terraform-docs
      #     path: usecase-7/README.md
          
      # - name: Add README.md
      #   uses: peter-evans/create-pull-request@v7.0.8
      #   with:
      #     token: ${{ secrets.GIT_TOKEN }}
      #     body: |
      #       ## Terraform Docs ##
      #       ```
      #       ${{ steps.readme.outputs.content }}

      # - name: Terraform test
      #   run: terraform test

        
      - name: Run Terraform Implementation
        run: |
          terraform init -reconfigure
          terraform validate
          terraform plan -var-file=terraform.tfvars
          # terraform apply -var-file=terraform.tfvars -auto-approve
          terraform destroy -var-file=terraform.tfvars -auto-approve

  # terraform-docs-reusable:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Install Terraform Docs
  #       uses: terraform-docs/gh-actions@v1.4.1
  #       with:
  #         working-dir: usecase-8
  #         output-file: README.md
  #         output-method: inject
  #         git-push: "true"
