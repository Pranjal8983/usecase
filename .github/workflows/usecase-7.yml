name: Terraform CI uc-7

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# permissions:
#   contents: read # Allow read access for checkout
#   pull-requests: write # Allow writing comments for Checkov
on:
 workflow_dispatch:
  
permissions:
  id-token: write
  contents: write
  repository-projects: write
  actions: write
  checks: write
  deployments: write

jobs:
  terraform-usecase-7:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: usecase-7

  # terraform_validate:
  #   runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: SetUp AWS OIDC
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          role-to-assume: ${{ secrets.OIDC_ROLE }}

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true # Allow subsequent steps to run even if fmt fails

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Output fmt results
        if: steps.fmt.outputs.stdout != ''
        run: echo "${{ steps.fmt.outputs.stdout }}"

      - name: Fail if Terraform fmt failed
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "Terraform formatting failed. Please run 'terraform fmt' locally."
          exit 1

  tflint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.x.x # Match your Terraform version

      - name: Install TFLint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          sudo mv tflint /usr/local/bin/

      - name: TFLint Init
        run: tflint --init

      - name: Run TFLint
        run: tflint --recursive

  checkov:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        # Adjust --directory to your Terraform code's root if not repository root
        run: checkov --directory . --output cli --output github_pr --compact
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for PR comments

  terraform_docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install terraform-docs
        run: |
          go install github.com/terraform-docs/terraform-docs@v0.17.0 # Pin to a specific version
          sudo mv ~/go/bin/terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs
        id: docs
        run: |
          terraform-docs markdown table --output-file README.md --output-mode inject .
        continue-on-error: true # Allow subsequent steps

      - name: Create Pull Request for Docs Updates
        uses: peter-evans/create-pull-request@v6
        if: github.ref == 'refs/heads/main' && steps.docs.outputs.changes != '' # Only on push to main and if changes
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "docs: Update Terraform documentation"
          branch: "terraform-docs-update"
          title: "Docs: Automated Terraform documentation update"
          body: "This is an automated pull request to update the Terraform documentation (README.md)."
          labels: documentation
          add-paths: README.md
